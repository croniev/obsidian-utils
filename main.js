/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CronievObsidianUtils
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var obsidian = require("obsidian");
var CronievObsidianUtils = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  async onload() {
    console.log("Loading CronievObsidianUtils: Parse Dates");
    this.addCommand({
      id: "parse-dates",
      name: "Parse Dates",
      editorCallback: (editor, view) => {
        this.parseDates(editor);
      }
    });
    console.log("Loading CronievObsidianUtils: Add Page Reference");
    this.isActive = false;
    this.page = 0;
    this.status = this.addStatusBarItem();
    this.statusEl = this.status.createEl("span", { text: "" });
    this.addCommand({
      id: "add-reference",
      name: "Add Page Reference",
      editorCallback: (editor, view) => {
        if (this.isActive) {
          this.addReference(editor);
        } else {
          console.log("Tried to add a reference but no page is set.");
        }
      }
    });
    this.addCommand({
      id: "set-page",
      name: "Set Page",
      callback: () => {
        this.setPage(0);
      }
    });
    this.addCommand({
      id: "increase-page",
      name: "Increase Page",
      callback: () => {
        if (this.isActive) {
          this.setPage(1);
        }
      }
    });
    this.addCommand({
      id: "decrese-page",
      name: "Decrease Page",
      callback: () => {
        if (this.isActive) {
          this.setPage(-1);
        }
      }
    });
  }
  async onunload() {
    console.log("Unloading plugin CronievObsidianUtils...");
  }
  // INFO: FCT - Parse Dates
  async parseDates(editor) {
    let cursor = editor.getCursor();
    editor.setSelection({ line: 0, ch: 0 }, { line: editor.lastLine(), ch: 0 });
    let selectedText = editor.getSelection();
    if (!selectedText.match(/><\/span>/)) {
      editor.setCursor(cursor);
      return;
    }
    try {
      let d1 = selectedText.match(/data-date='.{1,4}-/)[0].slice(11, -1);
      let d2 = selectedText.match(/data-end='.{1,4}-/)[0].slice(10, -1);
      let type = selectedText.match(/data-class='.*'/)[0].slice(12, -1);
      if (type.slice(0, 6) == "person") {
        var newString = "\nGeburtsdatum:: " + d1 + "\n\nTod:: " + d2 + "\n</span>";
      } else if (type.slice(0, 6) == "geschi" || type == "periode") {
        newString = "\nStart:: " + d1 + "\n\nEnde:: " + d2 + "\n</span>";
      }
      selectedText = selectedText.replace("</span>", newString);
      editor.replaceSelection(selectedText, "around");
      cursor.line += 4;
    } catch (e) {
    } finally {
      editor.setCursor(cursor);
    }
  }
  // INFO: FCT - Add Page Reference
  async addReference(editor) {
    if (editor == null) {
      return;
    }
    let insert = ` (S.${this.page})`;
    let pos = editor.getCursor();
    editor.replaceRange(insert, pos);
    pos.ch += insert.length;
    editor.setCursor(pos);
  }
  async setPage(direction) {
    if (direction == 1) {
      this.page++;
      this.statusEl.empty();
      this.statusEl = this.status.createEl("span", { text: ` (S.${this.page})` });
    } else if (direction == -1) {
      this.page--;
      this.statusEl.empty();
      this.statusEl = this.status.createEl("span", { text: ` (S.${this.page})` });
    } else if (direction == 0) {
      let res = parseInt(await InputModal.Prompt(this.app));
      if (isNaN(res)) {
        this.isActive = false;
        this.statusEl.empty();
      } else {
        this.statusEl.empty();
        this.page = res;
        this.isActive = true;
        this.statusEl = this.status.createEl("span", { text: ` (S.${this.page})` });
      }
    }
  }
};
var InputModal = class _InputModal extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.input = "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app) {
    const newPromptModal = new _InputModal(app);
    return newPromptModal.waitForClose;
  }
  display() {
    this.contentEl.empty();
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(mainContentContainer);
  }
  createInputField(container) {
    const textComponent = new obsidian.TextComponent(container);
    textComponent.inputEl.style.width = "100%";
    textComponent.onChange((value) => this.input = value).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener("keydown", this.submitEnterCallback);
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
//# sourceMappingURL=data:application/json;base64,
