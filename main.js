/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => TimelinesParseDates
});
var import_obsidian = __toModule(require("obsidian"));
var import_child_process = __toModule(require("child_process"));
var obsidian = require("obsidian");
var TimelinesParseDates = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  async onload() {
    console.log("Loading plugin TimelinesParseDates...");
    this.addCommand({
      id: "parse-dates",
      name: "Parse Dates",
      editorCallback: (editor, view) => {
        this.parseDates(editor);
      },
      hotkeys: [
        {
          modifiers: ["Alt"],
          key: "D"
        }
      ]
    });
    this.addCommand({
      id: "fill-birthday",
      name: "Fill Birthday",
      editorCallback: (editor, view) => {
        this.fillBirthday(editor, this.app.workspace.getActiveFile().basename);
      }
    });
  }
  async onunload() {
    console.log("Unloading plugin TimelinesParseDates...");
  }
  async parseDates(editor) {
    let cursor = editor.getCursor();
    editor.setSelection({ line: 0, ch: 0 }, { line: editor.lastLine(), ch: 0 });
    let selectedText = editor.getSelection();
    if (!selectedText.match(/><\/span>/)) {
      editor.setCursor(cursor);
      return;
    }
    try {
      let d1 = selectedText.match(/data-date='.{1,4}-/)[0].slice(11, -1);
      let d2 = selectedText.match(/data-end='.{1,4}-/)[0].slice(10, -1);
      let type = selectedText.match(/data-class='.*'/)[0].slice(12, -1);
      if (type.slice(0, 6) == "person") {
        var newString = "\nGeburtsdatum:: " + d1 + "\n\nTod:: " + d2 + "\n</span>";
      } else if (type.slice(0, 6) == "geschi" || type == "periode") {
        newString = "\nStart:: " + d1 + "\n\nEnde:: " + d2 + "\n</span>";
      }
      selectedText = selectedText.replace("</span>", newString);
      editor.replaceSelection(selectedText, "around");
      cursor.line += 4;
    } catch (e) {
    } finally {
      editor.setCursor(cursor);
    }
  }
  async fillBirthday(editor, name) {
    console.log(`Querying about the birthdates of "${name}".`);
    let result = await this.getBirthdays(name);
    if (!result) {
      return;
    }
    let cursor = editor.getCursor();
    editor.setSelection({ line: 0, ch: 0 }, { line: editor.lastLine(), ch: 0 });
    let selectedText = editor.getSelection();
    var newText = selectedText.replaceAll("@birthday", result.birthday);
    newText = newText.replaceAll("@deathday", result.deathday);
    editor.replaceSelection(newText, "around");
    editor.setCursor(cursor);
  }
  async getBirthdays(name) {
    var result = { birthday: "", deathday: "2100" };
    let url = `https://api.wikimedia.org/core/v1/wikipedia/en/search/page?q=${name}&limit=1`;
    var response = (0, import_child_process.execSync)(`curl ${url}`, { encoding: "utf-8" });
    let data = JSON.parse(response);
    if (!data) {
      console.log(`Fetching online content failed.`);
      return;
    }
    if (data.pages.length == 0) {
      console.log(`No page was found for "${name}".`);
      return;
    }
    let page = data.pages[0];
    let excerptMatch = page.excerpt.match(/[0-9]{3,4}/g);
    if (!excerptMatch) {
      console.log(`No dates were found for "${name}".`);
      return;
    }
    result.birthday = excerptMatch[0];
    if (excerptMatch.length > 1) {
      result.deathday = excerptMatch[1];
    }
    return result;
  }
};
//# sourceMappingURL=data:application/json;base64,
