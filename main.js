/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CronievObsidianUtils
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var obsidian = require("obsidian");
var CronievObsidianUtils = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.DEFAULT_SETTINGS = {
      enable_reference: false,
      enable_parse: false,
      reference_format: " (S.${number})",
      reference_inc_by: "1",
      reference_dec_by: "1",
      parse_content: { "geschi": "\nStart:: ${start}\n\nEnde:: ${end}\n", "person": "\nGeburtsdatum:: ${start}\n\nTod:: ${start}\n" }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ObsidianUtilsSettingsTab(this.app, this));
    await this.saveSettings();
    if (this.settings.enable_parse) {
      console.log("Loading CronievObsidianUtils: Parse Dates");
      this.addCommand({
        id: "parse-dates",
        name: "Parse Dates",
        editorCallback: (editor, view) => {
          this.parseDates(editor);
        }
      });
    }
    if (this.settings.enable_reference) {
      console.log("Loading CronievObsidianUtils: Add Number Reference");
      this.isActive = false;
      this.number = 0;
      this.status = this.addStatusBarItem();
      this.statusEl = this.status.createEl("span", { text: "" });
      this.addCommand({
        id: "add-reference",
        name: "Add Number Reference",
        editorCallback: (editor, view) => {
          if (this.isActive) {
            this.addReference(editor);
          } else {
            console.log("Tried to add a reference but no number is set.");
          }
        }
      });
      this.addCommand({
        id: "set-number",
        name: "Set Number",
        callback: () => {
          this.setNumber(0);
        }
      });
      this.addCommand({
        id: "increase-number",
        name: "Increase Number",
        callback: () => {
          if (this.isActive) {
            this.setNumber(1);
          }
        }
      });
      this.addCommand({
        id: "decrese-number",
        name: "Decrease Number",
        callback: () => {
          if (this.isActive) {
            this.setNumber(-1);
          }
        }
      });
    }
  }
  async onunload() {
    console.log("Unloading plugin CronievObsidianUtils...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, this.DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // INFO: FCT - Parse Dates
  async parseDates(editor) {
    let cursor = editor.getCursor();
    editor.setSelection({ line: 0, ch: 0 }, { line: editor.lastLine(), ch: 0 });
    let selectedText = editor.getSelection();
    if (!selectedText.match(/><\/span>/)) {
      console.log("No empty span element found. Try adding a linebreak after the closing tag.");
      editor.setCursor(cursor);
      return;
    }
    try {
      let d1 = selectedText.match(/data-date='.{1,4}-/)[0].slice(11, -1);
      let d2 = selectedText.match(/data-end='.{1,4}-/)[0].slice(10, -1);
      let type = selectedText.match(/data-class='.*'/)[0].slice(12, -1);
      let key = Object.keys(this.settings.parse_content).find((k) => type.contains(k));
      if (!key) {
        console.log(`No fill content setting found for class "${type}".`);
        return;
      }
      let newString = this.settings.parse_content[key].replace("${start}", d1).replace("${end}", d2) + "</span>";
      selectedText = selectedText.replace("</span>", newString);
      editor.replaceSelection(selectedText, "around");
      cursor.line += 4;
    } catch (e) {
      console.log(e);
    } finally {
      editor.setCursor(cursor);
    }
  }
  // INFO: FCT - Add Number Reference
  async addReference(editor) {
    if (editor == null) {
      return;
    }
    let insert = this.settings.reference_format.replace("${number}", this.number);
    let pos = editor.getCursor();
    editor.replaceRange(insert, pos);
    pos.ch += insert.length;
    editor.setCursor(pos);
  }
  async setNumber(direction) {
    if (direction == 1) {
      this.number += Number(this.settings.reference_inc_by);
      this.statusEl.empty();
      this.statusEl = this.status.createEl("span", { text: this.settings.reference_format.replace("${number}", this.number) });
    } else if (direction == -1) {
      this.number -= Number(this.settings.reference_dec_by);
      this.statusEl.empty();
      this.statusEl = this.status.createEl("span", { text: this.settings.reference_format.replace("${number}", this.number) });
    } else if (direction == 0) {
      try {
        var res = parseInt(await InputModal.Prompt(this.app));
        if (isNaN(res)) {
          this.isActive = false;
          this.statusEl.empty();
        } else {
          this.statusEl.empty();
          this.number = res;
          this.isActive = true;
          this.statusEl = this.status.createEl("span", { text: this.settings.reference_format.replace("${number}", this.number) });
        }
      } catch (e) {
      }
    }
  }
};
var InputModal = class _InputModal extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.input = "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app) {
    const newPromptModal = new _InputModal(app);
    return newPromptModal.waitForClose;
  }
  display() {
    this.contentEl.empty();
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(mainContentContainer);
  }
  createInputField(container) {
    const textComponent = new import_obsidian.TextComponent(container);
    textComponent.inputEl.style.width = "100%";
    textComponent.onChange((value) => this.input = value).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener("keydown", this.submitEnterCallback);
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
var ObsidianUtilsSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Croniev Obsidian Utils - Settings" });
    containerEl.createEl("h3", { text: "Parse Dates" });
    new import_obsidian.Setting(containerEl).setName("Enable").setDesc("Turn on the Parse Dates command? (Reload obsidian for changes to take effect.)").addToggle((toggle) => toggle.setValue(this.plugin.settings.enable_parse).onChange((value) => {
      this.plugin.settings.enable_parse = !this.plugin.settings.enable_parse;
      this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.enable_parse) {
      new import_obsidian.Setting(containerEl).setName("Fill Content").setDesc("What should be inserted for which timelines class. Use ${start} and ${end} for the two dates.\nInput in JSON format, else the settings won't save.").addTextArea(
        (text) => text.setPlaceholder(JSON.stringify(this.plugin.DEFAULT_SETTINGS.parse_content)).setValue(JSON.stringify(this.plugin.settings.parse_content)).onChange((value) => {
          try {
            this.plugin.settings.parse_content = JSON.parse(value);
            this.plugin.saveSettings();
          } catch {
          }
        })
      );
    }
    containerEl.createEl("h3", { text: "Number References" });
    new import_obsidian.Setting(containerEl).setName("Enable").setDesc("Turn on the Number Reference commands? (Reload obsidian for changes to take effect.)").addToggle((toggle) => toggle.setValue(this.plugin.settings.enable_reference).onChange((value) => {
      this.plugin.settings.enable_reference = !this.plugin.settings.enable_reference;
      this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.enable_reference) {
      new import_obsidian.Setting(containerEl).setName("Format").setClass("example").setDesc(`How the number should be inserted. Use \${number}. Example${this.plugin.settings.reference_format.replace("${number}", 13)}`).addTextArea((text) => text.setPlaceholder(this.plugin.DEFAULT_SETTINGS.reference_format).setValue(this.plugin.settings.reference_format).onChange(async (value) => {
        this.plugin.settings.reference_format = value;
        await this.plugin.saveSettings();
        this.containerEl.getElementsByClassName("example")[0].children[0].children[1].innerText = `How the number should be inserted. Use \${number}. Example${this.plugin.settings.reference_format.replace("${number}", 13)}`;
        if (this.plugin.isActive) {
          this.plugin.statusEl.empty();
          this.plugin.statusEl = this.plugin.status.createEl("span", { text: value.replace("${number}", this.plugin.number) });
        }
      }));
      new import_obsidian.Setting(containerEl).setName("Increase by").setDesc("Amount to add to the current number on increase (a number).").addTextArea((text) => text.setPlaceholder(this.plugin.DEFAULT_SETTINGS.reference_inc_by).setValue(this.plugin.settings.reference_inc_by).onChange((value) => {
        if (!value || isNaN(value)) {
          this.plugin.settings.reference_inc_by = this.plugin.DEFAULT_SETTINGS.reference_inc_by;
          this.plugin.saveSettings();
        } else {
          this.plugin.settings.reference_inc_by = value;
          this.plugin.saveSettings();
        }
      }));
      new import_obsidian.Setting(containerEl).setName("Decrease by").setDesc("Amount to subtract from the current number on decrease (a number).").addTextArea((text) => text.setPlaceholder(this.plugin.DEFAULT_SETTINGS.reference_dec_by).setValue(this.plugin.settings.reference_dec_by).onChange((value) => {
        if (!value || isNaN(value)) {
          this.plugin.settings.reference_dec_by = this.plugin.DEFAULT_SETTINGS.reference_dec_by;
          this.plugin.saveSettings();
        } else {
          this.plugin.settings.reference_dec_by = value;
          this.plugin.saveSettings();
        }
      }));
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
