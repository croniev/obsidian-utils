/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CronievObsidianUtils
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CronievObsidianUtils = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  async onload() {
    console.log("Loading plugin CronievObsidianUtils...");
    this.addCommand({
      id: "parse-dates",
      name: "Parse Dates",
      editorCallback: (editor, view) => {
        this.parseDates(editor);
      }
    });
  }
  async onunload() {
    console.log("Unloading plugin CronievObsidianUtils...");
  }
  async parseDates(editor) {
    let cursor = editor.getCursor();
    editor.setSelection({ line: 0, ch: 0 }, { line: editor.lastLine(), ch: 0 });
    let selectedText = editor.getSelection();
    if (!selectedText.match(/><\/span>/)) {
      editor.setCursor(cursor);
      return;
    }
    try {
      let d1 = selectedText.match(/data-date='.{1,4}-/)[0].slice(11, -1);
      let d2 = selectedText.match(/data-end='.{1,4}-/)[0].slice(10, -1);
      let type = selectedText.match(/data-class='.*'/)[0].slice(12, -1);
      if (type.slice(0, 6) == "person") {
        var newString = "\nGeburtsdatum:: " + d1 + "\n\nTod:: " + d2 + "\n</span>";
      } else if (type.slice(0, 6) == "geschi" || type == "periode") {
        newString = "\nStart:: " + d1 + "\n\nEnde:: " + d2 + "\n</span>";
      }
      selectedText = selectedText.replace("</span>", newString);
      editor.replaceSelection(selectedText, "around");
      cursor.line += 4;
    } catch (e) {
    } finally {
      editor.setCursor(cursor);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgUGx1Z2lufSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3Jvbmlldk9ic2lkaWFuVXRpbHMgZXh0ZW5kcyBQbHVnaW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0xvYWRpbmcgcGx1Z2luIENyb25pZXZPYnNpZGlhblV0aWxzLi4uJyk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAncGFyc2UtZGF0ZXMnLFxuICAgICAgICAgICAgbmFtZTogJ1BhcnNlIERhdGVzJyxcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VEYXRlcyhlZGl0b3IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdVbmxvYWRpbmcgcGx1Z2luIENyb25pZXZPYnNpZGlhblV0aWxzLi4uJyk7XG4gICAgfVxuXG4gICAgYXN5bmMgcGFyc2VEYXRlcyhlZGl0b3I6IEVkaXRvcikge1xuICAgICAgICBsZXQgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpXG4gICAgICAgIGVkaXRvci5zZXRTZWxlY3Rpb24oeyBsaW5lOiAwLCBjaDogMCB9LCB7IGxpbmU6IGVkaXRvci5sYXN0TGluZSgpLCBjaDogMCB9KVxuICAgICAgICBsZXQgc2VsZWN0ZWRUZXh0ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgICAgICBpZiAoIXNlbGVjdGVkVGV4dC5tYXRjaCgvPjxcXC9zcGFuPi8pKXtcbiAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IoY3Vyc29yKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGQxID0gc2VsZWN0ZWRUZXh0Lm1hdGNoKC9kYXRhLWRhdGU9Jy57MSw0fS0vKVswXS5zbGljZSgxMSwgLTEpXG4gICAgICAgICAgICBsZXQgZDIgPSBzZWxlY3RlZFRleHQubWF0Y2goL2RhdGEtZW5kPScuezEsNH0tLylbMF0uc2xpY2UoMTAsIC0xKVxuICAgICAgICAgICAgbGV0IHR5cGUgPSBzZWxlY3RlZFRleHQubWF0Y2goL2RhdGEtY2xhc3M9Jy4qJy8pWzBdLnNsaWNlKDEyLCAtMSlcblxuICAgICAgICAgICAgLy8gVHJlbm5lIGdlc2NoaSwgcGVyc29uXG4gICAgICAgICAgICBpZiAodHlwZS5zbGljZSgwLCA2KSA9PSBcInBlcnNvblwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1N0cmluZyA9ICdcXG5HZWJ1cnRzZGF0dW06OiAnICsgZDEgKyAnXFxuXFxuVG9kOjogJyArIGQyICsgJ1xcbjwvc3Bhbj4nXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUuc2xpY2UoMCwgNikgPT0gXCJnZXNjaGlcIiB8fCB0eXBlID09IFwicGVyaW9kZVwiKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RyaW5nID0gJ1xcblN0YXJ0OjogJyArIGQxICsgJ1xcblxcbkVuZGU6OiAnICsgZDIgKyAnXFxuPC9zcGFuPidcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRlx1MDBGQ2dlIGRlbiBlbnRzcHJlY2hlbmRlbiBUZXh0IGFucyBFbmRlIGFuLlxuICAgICAgICAgICAgc2VsZWN0ZWRUZXh0ID0gc2VsZWN0ZWRUZXh0LnJlcGxhY2UoJzwvc3Bhbj4nLCBuZXdTdHJpbmcpXG5cbiAgICAgICAgICAgIC8vIEFkZCBkYXRlcyBhdCByaWdodCBsb2NhdGlvblxuICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oc2VsZWN0ZWRUZXh0LCAnYXJvdW5kJyk7XG4gICAgICAgICAgICBjdXJzb3IubGluZSArPSA0XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGUpXG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKGN1cnNvcilcbiAgICAgICAgfVxuICAgIH07XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQWlEO0FBRWpELElBQXFCLHVCQUFyQixjQUFrRCx1QkFBTztBQUFBLEVBQ3JELGNBQWM7QUFDVixVQUFNLEdBQUcsU0FBUztBQUFBLEVBQ3RCO0FBQUEsRUFFQSxNQUFNLFNBQVM7QUFDWCxZQUFRLElBQUksd0NBQXdDO0FBRXBELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUI7QUFDcEQsYUFBSyxXQUFXLE1BQU07QUFBQSxNQUMxQjtBQUFBLElBQ0osQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVBLE1BQU0sV0FBVztBQUNiLFlBQVEsSUFBSSwwQ0FBMEM7QUFBQSxFQUMxRDtBQUFBLEVBRUEsTUFBTSxXQUFXLFFBQWdCO0FBQzdCLFFBQUksU0FBUyxPQUFPLFVBQVU7QUFDOUIsV0FBTyxhQUFhLEVBQUUsTUFBTSxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLFNBQVMsR0FBRyxJQUFJLEVBQUUsQ0FBQztBQUMxRSxRQUFJLGVBQWUsT0FBTyxhQUFhO0FBQ3ZDLFFBQUksQ0FBQyxhQUFhLE1BQU0sV0FBVyxHQUFFO0FBQ2pDLGFBQU8sVUFBVSxNQUFNO0FBQ3ZCO0FBQUEsSUFDSjtBQUVBLFFBQUk7QUFDQSxVQUFJLEtBQUssYUFBYSxNQUFNLG9CQUFvQixFQUFFLENBQUMsRUFBRSxNQUFNLElBQUksRUFBRTtBQUNqRSxVQUFJLEtBQUssYUFBYSxNQUFNLG1CQUFtQixFQUFFLENBQUMsRUFBRSxNQUFNLElBQUksRUFBRTtBQUNoRSxVQUFJLE9BQU8sYUFBYSxNQUFNLGlCQUFpQixFQUFFLENBQUMsRUFBRSxNQUFNLElBQUksRUFBRTtBQUdoRSxVQUFJLEtBQUssTUFBTSxHQUFHLENBQUMsS0FBSyxVQUFVO0FBQzlCLFlBQUksWUFBWSxzQkFBc0IsS0FBSyxlQUFlLEtBQUs7QUFBQSxNQUNuRSxXQUFXLEtBQUssTUFBTSxHQUFHLENBQUMsS0FBSyxZQUFZLFFBQVEsV0FBVztBQUMxRCxvQkFBWSxlQUFlLEtBQUssZ0JBQWdCLEtBQUs7QUFBQSxNQUN6RDtBQUdBLHFCQUFlLGFBQWEsUUFBUSxXQUFXLFNBQVM7QUFHeEQsYUFBTyxpQkFBaUIsY0FBYyxRQUFRO0FBQzlDLGFBQU8sUUFBUTtBQUFBLElBQ25CLFNBQ08sR0FBRztBQUFBLElBRVYsVUFDQTtBQUNJLGFBQU8sVUFBVSxNQUFNO0FBQUEsSUFDM0I7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
